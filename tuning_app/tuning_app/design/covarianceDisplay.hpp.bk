#ifndef COVARIANCEDISPLAY_HPP
#define COVARIANCEDISPLAY_HPP

#include <QWidget>
#include <QChartView>
#include <QChart>
#include <QScatterSeries>
#include <QValueAxis>
#include <QtCharts>

#include <Eigen/Dense>

namespace rom_dynamics::ui::qt {

class RomCovarianceGraph : public QWidget
{
    Q_OBJECT

public:
    explicit RomCovarianceGraph(QWidget *parent = nullptr);
    ~RomCovarianceGraph();

    void updateCovarianceGraph(double ekf_pose_x, 
        double ekf_pose_y, 
        double ekf_pose_yaw, 
        double xx_cov, 
        double xy_cov, 
        double yx_cov, 
        double yy_cov, 
        double yaw_cov);

private:
    // Qt Chart Components
    QChartView *chart_view_position_;
    QChart *chart_position_;
    QScatterSeries *ellipse_series_;
    QValueAxis *axisX_;
    QValueAxis *axisY_;

    // ADD THIS: Series for the Yaw Arc
    QLineSeries *yaw_arc_series_; 

    // Visualization Data
    double current_x_ = 0.0;
    double current_y_ = 0.0;
    double current_yaw_ = 0.0;
    std::array<double, 36> current_covariance_;
    
    void initializeChart();
    void updateVisualization();

    // Custom drawing functions
    void drawPositionEllipse(const Eigen::Matrix2d& covariance_xy);
    void drawYawSector(double yaw, double yaw_variance);

private slots:
    //void onReceiveCovarianceData(double x, double y, double yaw, const std::array<double, 36>& covariance);
};

}

#endif // COVARIANCEDISPLAY_HPP
